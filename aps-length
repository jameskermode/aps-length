#!/usr/bin/env python

"""
Count length of an APS manuscript formatted in LaTeX, following
guidelines described at http://journals.aps.org/authors/length-guide

Copyright (c) James Kermode <james.kermode@gmail.com> 2014

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
"""

import glob
import optparse
import os
import sys
import subprocess

word_limit = {'PRL': 3500,
              'PRA-RC': 3500,
              'PRB-RC': 3500,
              'PRC-RC': 4500,
              'PRD-RC': 4000,
              'PRE-RC': 3500,
              'PRApplied': 3500,
              'PRST-PER': 3500}

wordcount_tex_contents = r"""\ProvidesFile{wordcount.tex}[2000/09/27 v1.5 Michael Downes]
% Copyright 2000 Michael John Downes
% This file has no restrictions on its use, distribution, or sale.
%
% If you run LaTeX on wordcount.tex it will prompt you for the name of a
% document to be counted. For most people, however, it will be more
% convenient to run the shell script wordcount.sh, giving the document
% name as the first argument. The comments in wordcount.sh
% give further information about the usage and limitations of this tool.

% The fundamental idea is to mark each character and interword space
% with a unique tag that will show up in TeX "showbox" output. Then
% arrange to make the output routine trigger a TeX overfull vbox message
% for the page box so that everything gets reported in the TeX log.
% Then run grep -c (or an equivalent text search utility, e.g., perl) on
% the log file to count the occurrences.
%
% In showbox output, a character is typically represented by a line of
% the form
%
%   ...\T1/cmr/m/n/10 e
%
% where "\T1/cmr/m/n/10" is the font name. We arrange things so that all
% characters are typeset in a font named "\3.08632". Furthermore, for
% interword spaces, which are normally represented in the output as
% something like
%
%   ...\glue 3.33333 plus 1.66666 minus 1.11111
%
% we use \spaceskip to ensure that it always appears as
%
%   ...\glue(\spaceskip) 3.08633 plus 9.0
%
% Then to count characters (including word spaces) we can
% grep for lines matching "3.0863", while to count words we
% count the number of lines in the log that match "3.08633" but not
% "3.08632".
%
% For an accurate count in multi-line paragraphs we also need
% to set rightskip to the flag value, since interword spaces are
% discarded at line breaks; and on the presumption that hyphenated
% compounds like "steady-state" should be counted as two words, we set
% \exhyphenpenalty to a value that ensures a line break at *every*
% explicit hyphen---then we will get a rightskip glue node between the
% two parts. (How about em-dashes? you may ask. Answer: it works all
% right, try it and see.)

\ifx\relax\?\def\wcQUIET{TT}\else\def\wcQUIET{TF}\fi

% We want accented letters to be represented by a single font char, to
% the extent possible:
\RequirePackage[T1]{fontenc}
\makeatletter
\thickmuskip=5.55555mu plus5.55555mu minus 2.22222mu
\let\@@thickmuskip\thickmuskip \newmuskip\thickmuskip
\let\@@spaceskip\spaceskip \xspaceskip=0pt
\newskip\@charfontname
% Ensure that these cannot be overridden.
\let\spaceskip\@charfontname \let\xspaceskip\spaceskip
\def\FreezeSpaces{%
  \setbox\z@\hbox{\mathsurround=\z@ $\mkern\@@thickmuskip$}%
  \@@spaceskip=\wd\z@ plus 9pt\relax
  % Setting rightskip to a slightly different value means that
  % end-of-line spaces can be distinguished if desired. (By default,
  % they are not.) Using fil units means there won't be any hyphenation
  % except for explicit hyphens.
  \dimen@\@@spaceskip \advance\dimen@ 1sp\relax
  \rightskip\z@ plus\strip@pt\dimen@ fil\relax
  % Prevent any further changes to \rightskip.
  \let\rightskip\spaceskip
  \@charfontname=\wd\z@ \advance\@charfontname -1sp\relax
  % Cancel all non-1000 sfcodes, which might otherwise affect the value
  % of inter-sentence spaces and keep them from being counted as
  % interword spaces.
  \def\do{\sfcode\fam\@m \advance\fam\@ne
    \ifnum\fam>\@cclv\expandafter\@gobble\fi \do
  }%
  \fam\z@ \do
  \let\frenchspacing\relax \let\nonfrenchspacing\relax
}
\def\DashPatch{%
  \exhyphenpenalty=-\@M \let\exhyphenpenalty\count@
  \hyphenpenalty\@M \let\hyphenpenalty\count@
  % LaTeX bug? Default definitions for these don't have \exhyphenpenalty
  % built in. Change them to just print a hyphen so that the penalties
  % will work.
  \def\textemdash{-}\def\textendash{-}%
}
% Here we set the font to ptmr8t (a T1 encoded font for which most
% people are likely to have a tfm file) and then make it difficult for
% the font to be changed ever again. We use two names for the font,
% \ptmr and \3.08632, the former being easier to use when resetting math
% fonts. The name that is defined last when TeX processes a document is
% the one that will be used in the log file.
\def\FreezeFont{%
  \expandafter\font
    \csname\strip@pt\@charfontname\endcsname
    =ptmr8t \relax
  \ptmr
  \check@mathfonts \let\check@mathfonts\relax
  \def\do{%
    \textfont\fam=\ptmr\scriptfont\fam=\ptmr\scriptscriptfont\fam=\ptmr
    \advance\fam\@ne \ifnum\fam<\sixt@@n \else\expandafter\@gobble\fi
    \do
  }%
  \fam=0 \do
}
\font\ptmr=ptmr8t \relax
\fontdimen22\ptmr=1sp % to permit use as math font 2
\let\selectfont\relax
\let\fontshape\@gobble \let\fontseries\@gobble \let\fontfamily\@gobble
\let\fontencoding\@gobble \let\fontsize\@gobbletwo
\let\linespread\@gobble
\let\try@load@fontshape\relax
\@namedef{U/msa/m/n}{}% disable special test in AMS documentclasses
\def\define@newfont{\expandafter\let\font@name=\ptmr}
\let\@@hfuzz\hfuzz \let\@@vfuzz\vfuzz
\newdimen\hfuzz \let\vfuzz\hfuzz
\def\QuietBoxes{%
  \@@hfuzz\maxdimen \@@vfuzz\maxdimen
}
\AtBeginDocument{\FreezeSpaces \FreezeFont \DashPatch \QuietBoxes}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Halign patches
\def\ialign{\everycr{}\tabskip\@@spaceskip\halign} % initialized \halign
\def\extracolsep#1{\tabskip\@@spaceskip}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\nofiles \let\makeindex\@empty % work-around for a natbib problem
% Seize control of the output routine to avoid extra clutter of dvi
% files. Handling \AtBeginDVI would take some extra work--for now I
% won't bother.
\def\showpagebox{%
  \showboxbreadth\maxdimen\showboxdepth99
  % This is a devious way of getting the box contents into the log file
  % without actually using \showbox (which typically results in a
  % nonzero exit code from the TeX run).
  \@@vfuzz\z@
  \setbox\z@\vbox to\z@{\box\@outputbox}%
  \setbox\z@\box\voidb@x
  \global \@colht \textheight
  \stepcounter{page}%
  \let\firstmark\botmark
}
\AtBeginDocument{\def\@outputpage{\showpagebox}}
\if\wcQUIET\else
\begingroup \def\msg^^J#1]^^J{\endgroup\message{#1]^^J^^J}}
\endlinechar=`\^^J \catcode`\ =12 \msg

The 'wordcount' utility provides a way of estimating the number of
words in a LaTeX document.

[Warning: The counting method uses a large log file as an intermediate
step. If your disk space is extremely low the counting process
may end prematurely for lack of space.]

\fi

% \typein has extraneous blank lines and slightly idiosyncratic prompt.
\begingroup \endlinechar=-1
\message{File name [press RETURN to cancel]: }
\def\do{%
  \let\do\@makeother \dospecials
  \global\read-1 to\wcFileName
  \endgroup
}
\do

\ifx\@empty\wcFileName
  \typeout{No file name given; quitting.}\expandafter\@@end\fi

\expandafter\filename@parse\expandafter{\wcFileName}
\edef\jobname{\filename@base}

\if\wcQUIET
  \message{\wcFileName}
\else
\typeout{^^JTo get a count of characters, run^^J^^J \space
%
  grep -c '3[.]0863[23]' wordcount.log^^J^^J%
%
or equivalent when processing is finished.^^J%
}
\fi

\typeout{Processing \wcFileName...^^J}

\IfFileExists{\wcFileName}{\batchmode}{\nonstopmode}
\edef\@tempa{\noexpand\makeatother
  \noexpand\input{\wcFileName}\noexpand\stop
}
\@tempa
"""

def is_first_line(line):
    if line.strip() == '':
        return False
    if '%' in line:
        return False
    return True

def count_main_text_words_detex(detex_lines, tex_lines):
    # remove images and empty lines
    detex_lines = [line for line in detex_lines if len(line.strip()) > 0]
    detex_lines = [line for line in detex_lines if '<Picture' not in line]

    title_line_no, = [i for i, line in enumerate(tex_lines) if '\maketitle' in line]
    first_line_no = title_line_no + 1
    while not is_first_line(tex_lines[first_line_no]):
        first_line_no += 1
    first_line = tex_lines[first_line_no]

    detex_first_line_no = 0
    for line in detex_lines:
        if line.strip() == first_line.strip():
            break
        detex_first_line_no += 1

    main_text = detex_lines[detex_first_line_no:]

    main_text = [line.replace('-', ' ') for line in main_text ] # hyphenated words count as two words
    lines_words = [line.split() for line in main_text]
    words = [word for words in lines_words for word in words ]

    #words_file = open('words', 'w')
    #words_file.writelines([word+'\n' for word in words])
    #words_file.close()

    main_text_words = len(words)
    return main_text_words

def count_main_text_words_wordcount(tex_lines, opts):
    """
    Count words in main text following method described at

    http://journals.aps.org/authors/length-guide-faq
    """
    mod_tex_lines = tex_lines[:]

    # Commenting out the \maketitle command
    mod_tex_lines = [ line.replace(r'\maketitle', r'%\maketitle') for line in mod_tex_lines ]

    # Using the 'nofootinbib' option
    mod_tex_lines = [ line.replace(r'\documentclass[', r'\documentclass[nofootbib, ')
                                    for line in mod_tex_lines ]
    # Putting an \end{document} before the bibliography
    bib_index = [ i for (i, line) in enumerate(mod_tex_lines) if r'\bibliography{' in line]
    if bib_index:
        mod_tex_lines.insert(bib_index[0], r'\end{document}' + '\n')

    # Putting an \end{document} before the acknowledgments/acknowledgements in environment \acknowledgments{...}
    ack_index = [ i for (i, line) in enumerate(mod_tex_lines) if r'\acknowle' in line]
    if ack_index:
        mod_tex_lines.insert(ack_index[0], r'\end{document}' + '\n')


    # Comment out any display equations and acknowledgments
    filterenvs = ['equation', 'eqnarray', 'align', 'displaymath', 'acknowledgments',
                  'acknowledgements', 'abstract', 'thebibliography']
    filtered_lines = []
    while mod_tex_lines:
        line = mod_tex_lines.pop(0)
        for env in filterenvs:
            if r'\begin{%s' % env in line:
                while mod_tex_lines and not r'\end{%s}' % env in line:
                    line = '% ' + line
                    filtered_lines.append(line)
                    line = mod_tex_lines.pop(0)
                line = '% ' + line
                filtered_lines.append(line)
                line = mod_tex_lines.pop(0) # comment out the \end too
        filtered_lines.append(line)

    mod_tex_lines = filtered_lines

    # FIXME - Commenting out the rows (but not the caption) of any tables

    tmp_tex_file = open('tmp_tex_file.tex', 'w')
    tmp_tex_file.writelines(line for line in mod_tex_lines)
    tmp_tex_file.close()

    wordcount_tex_file = open('wordcount.tex', 'w')
    wordcount_tex_file.write(wordcount_tex_contents)
    wordcount_tex_file.close()

    os.system('%s tmp_tex_file > /dev/null 2>&1' % opts.latex)
    os.system('bibtex tmp_tex_file > /dev/null 2>&1')
    os.system('%s tmp_tex_file > /dev/null 2>&1' % opts.latex)
    os.system('%s tmp_tex_file > /dev/null 2>&1' % opts.latex)
    os.system(r'echo tmp_tex_file.tex | %s wordcount.tex > /dev/null 2>&1' % opts.latex)
    wordcount_log = open('wordcount.log').readlines()

    rm_files = glob.glob('wordcount*') + glob.glob('tmp_tex_file*')
    for file in rm_files:
        os.unlink(file)

    wordcount = len([line for line in wordcount_log if '3.08633' in line or '3.08635' in line])
    return wordcount

def find_equation_lines(tex_lines):
    return [i for (i, line) in enumerate(tex_lines) if (r'\begin{equation' in line or
                                                        r'\begin{eqnarray' in line or
                                                        r'\begin{align' in line or
                                                        r'\begin{displaymath' in line)]
def count_equation_words(lines, start_line):
    count = 1
    array = False
    array_lines = 0
    two_column = '*' in lines[start_line]
    if two_column:
        eqn_words_per_line = 32
    else:
        eqn_words_per_line = 16

    for line in lines[start_line+1:]:
        if (r'\end{equation' in line or
            r'\end{eqnarray' in line or
            r'\end{align' in line or
            r'\end{displaymath' in line):
            break
        if r'\\' in line:
            if not array:
                count += 1
            else:
                array_lines += 1
        if r'\begin{array}' in line:
            array = True
            array_lines = 0
        if r'\end{array}' in line:
            array = False

    if array_lines != 0:
        count *= array_lines

    return count*eqn_words_per_line

def count_equations_words(tex_lines):
    eqn_line_nos = find_equation_lines(tex_lines)
    eqn_words = [count_equation_words(tex_lines, eqn_line_no) for eqn_line_no in eqn_line_nos]
    print 'Equations: %r' % eqn_words
    return sum(eqn_words)

def find_table_lines(tex_lines):
    return [i for (i, line) in enumerate(tex_lines) if r'\begin{tabl' in line]

def count_table_words(tex_lines, table_line):
    two_column = 'table*' in tex_lines[table_line]
    count = 1
    for line in tex_lines[table_line:]:
        if r'\end{table' in line:
            break
        if r'\\' in line:
            count += 1
    if two_column:
        print 'Two-column table with %d lines' % count
        return int(13.*count + 26.)
    else:
        print 'Single-column table with %d lines' % count
        return int(6.5*count + 13.)

def count_tables_words(tex_lines):
    table_lines = find_table_lines(tex_lines)
    table_words = [ count_table_words(tex_lines, table_line) for table_line in table_lines ]
    print 'Tables: %r' % table_words
    return sum(table_words)


def count_figures_words(detex_lines, tex_lines, opts):
    if opts.var is None:
        tex_vars = {}
    else:
        tex_vars = dict(opts.var)

    fig_lines = [line for line in detex_lines if '<Picture' in line ]
    fig_words = []
    #figs = {}

    for fig_i, fig_line in enumerate(fig_lines):
        filename = fig_line.strip()[1:-1].split()[1]
        this_fig_lines = [ (i, line) for i, line in enumerate(tex_lines) if filename in line and
                           ('input' in line or 'includegraphics' in line)]
        (inc_fig_line_no, inc_fig_line) = this_fig_lines[0]
        fig_line_no = inc_fig_line_no
        while r'\begin{figure' not in tex_lines[fig_line_no]:
            fig_line_no -= 1
        two_column = 'figure*' in tex_lines[fig_line_no]

        subfig = 'subfloat' in tex_lines[inc_fig_line_no]
        newline = r'\\' in tex_lines[inc_fig_line_no]

        #print filename, tex_lines[inc_fig_line_no], tex_lines[fig_line_no]

        for key in tex_vars.keys():
            if key in filename:
                filename = filename.replace(key, tex_vars[key])

        for ext in ['', '.pdf', '.eps', '.png']:
            if len(glob.glob(filename+ext)) == 1:
                break
        else:
            raise IOError('missing picture file %s' % filename)
        filename = filename+ext

        if opts.figs == 'identify':
            identify = subprocess.Popen(['identify', filename],
                                        stdout=subprocess.PIPE)
            out, err = identify.communicate()
            fields = out.split()
            width, height = fields[2].split('x')
            width = float(width)
            height = float(height)
        elif opts.figs == 'gs':
            img_f = open(filename, 'r')
            gs = subprocess.Popen(['gs', '-q', '-dSAFER', '-dBATCH', '-sDEVICE=bbox', '-'],
                                  stdin=img_f, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = gs.communicate()
            img_f.close()
            bbox = err.split('\n')[0].split()
            width = float(bbox[3])
            height = float(bbox[4])
        else:
            raise ValueError('Unknown figure method "%s"' % opts.figs)

        #if fig_line_no not in figs:
        #    figs[fig_line_no] = (fig_i, two_column, [(width, height, newline, filename)])
        #else:
        #    figs[fig_line_no][2].append((width, height, newline, filename))

        aspect = float(width/height)

        if two_column:
            words_equiv = 300./(0.5*aspect) + 40.
        else:
            words_equiv = 150./aspect + 20.

        print 'Figure %d:   %6d words (%.0fx%.0f aspect %.2f, %s)' % (fig_i+1, int(words_equiv),
                                                                      width, height,
                                                                      aspect, filename)
        fig_words.append(words_equiv)

    return int(sum(fig_words)*opts.scale_figs)


def count_chars_abstract(tex_lines):
    abs_begin_line, = [i for (i,line) in enumerate(tex_lines) if r'\begin{abstract}' in line]
    abs_end_line, = [i for (i,line) in enumerate(tex_lines) if r'\end{abstract}' in line]

    abstract_lines = tex_lines[abs_begin_line:abs_end_line]
    abstract_lines = [line for line in abstract_lines if not line.startswith('%') ]
    abstract = ''.join(abstract_lines)
    print 'ABSTRACT:'
    print abstract
    return len(abstract)


def process(tex_file, opts):
    print 'Processing TeX file: %s\n' % tex_file
    detex = subprocess.Popen(['detex', '-e', opts.env, tex_file],
                             stdout=subprocess.PIPE)
    out, err = detex.communicate()
    detex_lines = out.strip().split('\n')

    tex_lines = open(tex_file).readlines()

    abstract_chars = count_chars_abstract(tex_lines)
    print
    print 'Abstract:    %6d chars (max 600)' % abstract_chars
    print

    if opts.method == 'detex':
        main_text_words = count_main_text_words_detex(detex_lines, tex_lines)
    elif opts.method == 'wordcount':
        main_text_words = count_main_text_words_wordcount(tex_lines, opts)
    else:
        raise ValueError('Unsupported method %s' % opts.method)
    eqn_words = count_equations_words(tex_lines)
    fig_words = count_figures_words(detex_lines, tex_lines, opts)
    table_words = count_tables_words(tex_lines)
    total_words = (main_text_words + eqn_words + fig_words + table_words)

    print
    print 'Main text:      %6d words' % main_text_words
    print 'Displayed Math: %6d words' % eqn_words
    print 'Figures:        %6d words' % fig_words
    print 'Tables:         %6d words' % table_words
    print 'TOTAL:          %6d words' % total_words
    print
    wl = word_limit[opts.journal]
    if total_words > wl:
        over_under = 'OVER'
    else:
        over_under = 'UNDER'
    print ('Manuscript %s is currently %d words (%.0f%%) %s limit of %d words for journal %s' %
           (tex_file, abs(total_words - wl),
            float(total_words - wl)/wl*100., over_under,
            wl, opts.journal))


parser = optparse.OptionParser(usage='%prog [options] tex-files',
                               description="""
Count length of an APS manuscript formatted in LaTeX, following
guidelines described at http://journals.aps.org/authors/length-guide""")

parser.add_option('-v', '--var', metavar='key value', nargs=2, action='append',
                help='Define TeX variables e.g. to specify location of figure files.')
parser.add_option('-e', '--env', metavar='env1,env2,...',
                help='Comma-separated list of LaTeX environments to ignore.',
                default='abstract,acknowledgments,acknowledgements,displaymath,equation,eqnarray,thebibliography')
parser.add_option('-m', '--method', metavar='(detex | wordcount)', default='wordcount',
                  help='''Tool to use to count words in main text. Default is wordcount.
detex is also supported (but tends to underestimate word count).''')
parser.add_option('-f', '--figs', metavar='(identify | gs)',
                  help='''Tool to use to extract bounding box from figure.
Default is gs, ImageMagick identify also supported. gs works with eps and pdf
images, while identify is a better choice for png images.''',
                  default='gs')
parser.add_option('--scale-figs', type=float, default=1.1,
                  help='Scale estimate of figure word counts by factor, default 1.1 (10%)')
parser.add_option('-j', '--journal', metavar='PRL', default='PRL',
                  help='Journal abbreviation (e.g. PRL, PRB-RC)')
parser.add_option('-l', '--latex', default='pdflatex',
                  help='Latex executable. Default is "pdflatex".')


opts, args = parser.parse_args()

orig_eps_pdf_files = glob.glob('*-eps-converted-to.pdf')

for tex_file in args:
    process(tex_file, opts)

for eps_pdf_file in glob.glob('*-eps-converted-to.pdf'):
    if eps_pdf_file not in orig_eps_pdf_files:
        os.remove(delname)
